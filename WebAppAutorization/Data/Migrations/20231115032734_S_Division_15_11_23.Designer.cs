// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAppAutorization.Data;

#nullable disable

namespace WebAppAutorization.Data.Migrations
{
    [DbContext(typeof(gnsDbContext))]
    [Migration("20231115032734_S_Division_15_11_23")]
    partial class S_Division_15_11_23
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("H_FactoryH_eemp", b =>
                {
                    b.Property<int>("H_Factorysid_factory")
                        .HasColumnType("int");

                    b.Property<int>("H_eempsid_eemp")
                        .HasColumnType("int");

                    b.HasKey("H_Factorysid_factory", "H_eempsid_eemp");

                    b.HasIndex("H_eempsid_eemp");

                    b.ToTable("H_FactoryH_eemp", "isdata");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Operator",
                            NormalizedName = "OPERATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.H_Division", b =>
                {
                    b.Property<int>("id_division")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_division"));

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<string>("id_source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("load_dttm")
                        .HasColumnType("datetime2");

                    b.Property<string>("name_division")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id_division");

                    b.HasAlternateKey("prefix", "name_division");

                    b.ToTable("H_Division", "isdata");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.H_Factory", b =>
                {
                    b.Property<int>("id_factory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_factory"));

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<string>("id_source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("load_dttm")
                        .HasColumnType("datetime2");

                    b.Property<string>("name_factory")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id_factory");

                    b.HasAlternateKey("name_factory");

                    b.ToTable("H_Factory", "isdata");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.H_eemp", b =>
                {
                    b.Property<int>("id_eemp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_eemp"));

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<int?>("id_parent")
                        .HasColumnType("int");

                    b.Property<string>("id_source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("load_dttm")
                        .HasColumnType("datetime2");

                    b.Property<string>("name_point")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("virtual_counter")
                        .HasColumnType("bit");

                    b.HasKey("id_eemp");

                    b.HasAlternateKey("prefix", "name_point");

                    b.ToTable("H_eemp", "isdata");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.H_object", b =>
                {
                    b.Property<int>("id_object")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_object"));

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<string>("id_source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("load_dttm")
                        .HasColumnType("datetime2");

                    b.Property<string>("name_object")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id_object");

                    b.HasAlternateKey("prefix", "name_object");

                    b.ToTable("H_object", "isdata");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.I_Division_eemp", b =>
                {
                    b.Property<int>("id_division")
                        .HasColumnType("int");

                    b.Property<int>("id_eemp")
                        .HasColumnType("int");

                    b.Property<int>("id_source")
                        .HasColumnType("int");

                    b.Property<DateTime?>("load_dttm")
                        .HasColumnType("datetime2");

                    b.HasKey("id_division", "id_eemp");

                    b.ToTable("I_Division_eemp", "isdata");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.I_Factory_Division", b =>
                {
                    b.Property<int>("id_factory")
                        .HasColumnType("int");

                    b.Property<int>("id_division")
                        .HasColumnType("int");

                    b.Property<int>("id_source")
                        .HasColumnType("int");

                    b.Property<DateTime?>("load_dttm")
                        .HasColumnType("datetime2");

                    b.HasKey("id_factory", "id_division");

                    b.HasIndex("id_division");

                    b.ToTable("I_Factory_Division", "isdata");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.I_Factory_eemp", b =>
                {
                    b.Property<int>("id_factory")
                        .HasColumnType("int");

                    b.Property<int>("id_eemp")
                        .HasColumnType("int");

                    b.Property<int?>("h_eempid_eemp")
                        .HasColumnType("int");

                    b.Property<int?>("h_factoryid_factory")
                        .HasColumnType("int");

                    b.Property<int>("id_source")
                        .HasColumnType("int");

                    b.Property<DateTime?>("load_dttm")
                        .HasColumnType("datetime2");

                    b.HasKey("id_factory", "id_eemp");

                    b.HasIndex("h_eempid_eemp");

                    b.HasIndex("h_factoryid_factory");

                    b.ToTable("I_Factory_eemp", "isdata");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.I_division_object", b =>
                {
                    b.Property<int>("id_division")
                        .HasColumnType("int");

                    b.Property<int>("id_object")
                        .HasColumnType("int");

                    b.Property<int>("id_source")
                        .HasColumnType("int");

                    b.Property<DateTime?>("load_dttm")
                        .HasColumnType("datetime2");

                    b.HasKey("id_division", "id_object");

                    b.HasIndex("id_object");

                    b.ToTable("I_division_object", "isdata");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.I_object_eemp", b =>
                {
                    b.Property<int>("id_object")
                        .HasColumnType("int");

                    b.Property<int>("id_eemp")
                        .HasColumnType("int");

                    b.Property<int>("id_source")
                        .HasColumnType("int");

                    b.Property<DateTime?>("load_dttm")
                        .HasColumnType("datetime2");

                    b.HasKey("id_object", "id_eemp");

                    b.HasIndex("id_eemp");

                    b.ToTable("I_object_eemp", "isdata");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.S_Division_info", b =>
                {
                    b.Property<DateTime>("load_dttm")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("h_divisionid_division")
                        .HasColumnType("int");

                    b.Property<int>("id_division")
                        .HasColumnType("int");

                    b.Property<int>("id_source")
                        .HasColumnType("int");

                    b.HasKey("load_dttm");

                    b.HasIndex("h_divisionid_division");

                    b.ToTable("S_Division_info", "isdata");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.S_Factory_info", b =>
                {
                    b.Property<DateTime>("load_dttm")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("h_factoryid_factory")
                        .HasColumnType("int");

                    b.Property<int>("id_factory")
                        .HasColumnType("int");

                    b.Property<int>("id_source")
                        .HasColumnType("int");

                    b.HasKey("load_dttm");

                    b.HasIndex("h_factoryid_factory");

                    b.ToTable("S_Factory_info", "isdata");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.S_eemp_cc", b =>
                {
                    b.Property<int>("counter_coefficient")
                        .HasColumnType("int");

                    b.Property<DateTime>("valid_from_dttm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("h_eempid_eemp")
                        .HasColumnType("int");

                    b.Property<int>("id_eemp")
                        .HasColumnType("int");

                    b.Property<int>("id_source")
                        .HasColumnType("int");

                    b.Property<DateTime>("valid_until_dttm")
                        .HasColumnType("datetime2");

                    b.HasKey("counter_coefficient", "valid_from_dttm");

                    b.HasIndex("h_eempid_eemp");

                    b.ToTable("S_eemp_cc", "isdata");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.S_eemp_info", b =>
                {
                    b.Property<DateTime>("load_dttm")
                        .HasColumnType("datetime2");

                    b.Property<string>("adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date_next_verif")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("factory_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("h_eempid_eemp")
                        .HasColumnType("int");

                    b.Property<int>("id_eemp")
                        .HasColumnType("int");

                    b.Property<int>("id_source")
                        .HasColumnType("int");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("load_dttm");

                    b.HasIndex("h_eempid_eemp");

                    b.ToTable("S_eemp_info", "isdata");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.S_object_info", b =>
                {
                    b.Property<DateTime>("load_dttm")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("h_objectid_object")
                        .HasColumnType("int");

                    b.Property<int>("id_object")
                        .HasColumnType("int");

                    b.Property<int>("id_source")
                        .HasColumnType("int");

                    b.HasKey("load_dttm");

                    b.HasIndex("h_objectid_object");

                    b.ToTable("S_object_info", "isdata");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<long?>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CurrentCompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateFiltrEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFiltrStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("ViewDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26007816-b2fe-4d5e-98d3-8c306eca9dd6",
                            CurrentCompanyId = 0L,
                            DateFiltrEnd = new DateTime(2023, 11, 15, 10, 27, 30, 282, DateTimeKind.Local).AddTicks(1618),
                            DateFiltrStart = new DateTime(2023, 11, 15, 10, 27, 30, 282, DateTimeKind.Local).AddTicks(1601),
                            Email = "s.isaev@ao-gns.ru",
                            EmailConfirmed = true,
                            FamilyName = "Исаев",
                            FirstName = "Сергей",
                            LastName = "Михайлович",
                            LockoutEnabled = false,
                            NormalizedEmail = "S.ISAEV@AO-GNS.RU",
                            NormalizedUserName = "ADMIN@AO-GNS.RU",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ58FrHijBa/qNkGTIDE19UppJNfZh4Fa/fJzKMvCVYZPjg/7gZM35a9d+f6MqCxwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f86809a8-d284-4d12-aa33-05a31cdc1722",
                            SoftDelete = true,
                            TwoFactorEnabled = false,
                            UserName = "admin@ao-gns.ru",
                            ViewDelete = false
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e15b7272-7982-46a4-bb22-826104168d7f",
                            CurrentCompanyId = 0L,
                            DateFiltrEnd = new DateTime(2023, 11, 15, 10, 27, 30, 282, DateTimeKind.Local).AddTicks(1718),
                            DateFiltrStart = new DateTime(2023, 11, 15, 10, 27, 30, 282, DateTimeKind.Local).AddTicks(1717),
                            Email = "s.isaev@ao-gns.ru",
                            EmailConfirmed = true,
                            FamilyName = "Исаев",
                            FirstName = "Сергей",
                            LastName = "Михайлович",
                            LockoutEnabled = false,
                            NormalizedEmail = "S.ISAEV@AO-GNS.RU",
                            NormalizedUserName = "S.ISAEV@AO-GNS.RU",
                            PasswordHash = "AQAAAAIAAYagAAAAEKsnd83sMpc8YYaqwCbYNkerkg3BYOFsM/x4FR91fdW4gsW5VFKWwNb0gDi4kTtPBQ==",
                            PhoneNumber = "+79137673814",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d2dac8a-ed24-498e-9153-95021d4f5d46",
                            SoftDelete = true,
                            TwoFactorEnabled = false,
                            UserName = "s.isaev@ao-gns.ru",
                            ViewDelete = false
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22aef6a2-46b9-48a4-a58f-c9649746c168",
                            CurrentCompanyId = 0L,
                            DateFiltrEnd = new DateTime(2023, 11, 15, 10, 27, 30, 282, DateTimeKind.Local).AddTicks(1738),
                            DateFiltrStart = new DateTime(2023, 11, 15, 10, 27, 30, 282, DateTimeKind.Local).AddTicks(1737),
                            Email = "GBI_GE@ao-gns.ru",
                            EmailConfirmed = true,
                            FamilyName = "",
                            FirstName = "",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "GBI_GE@AO-GNS.RU",
                            NormalizedUserName = "GBI_GE@AO-GNS.RU",
                            PasswordHash = "AQAAAAIAAYagAAAAEHyikk8XbS2mxeyEDe08XcJQaUFJnFWwLrijPQ5hFNIbU/ao2Vag1e0hcVYI/rmoSA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98873766-af41-4a26-a8f9-b9311b1e3211",
                            SoftDelete = true,
                            TwoFactorEnabled = false,
                            UserName = "GBI_GE@ao-gns.ru",
                            ViewDelete = false
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e2f0486-66da-4fc2-955c-e49a333bdc58",
                            CurrentCompanyId = 0L,
                            DateFiltrEnd = new DateTime(2023, 11, 15, 10, 27, 30, 282, DateTimeKind.Local).AddTicks(1747),
                            DateFiltrStart = new DateTime(2023, 11, 15, 10, 27, 30, 282, DateTimeKind.Local).AddTicks(1746),
                            Email = "kvlad1972@mail.ru",
                            EmailConfirmed = true,
                            FamilyName = "Кулеев",
                            FirstName = "Владимир",
                            LastName = "Александрович",
                            LockoutEnabled = false,
                            NormalizedEmail = "KVLAD1972@MAIL.RU",
                            NormalizedUserName = "KVLAD1972@MAIL.RU",
                            PasswordHash = "AQAAAAIAAYagAAAAELav6wL+1JdkgO5GtLF1HiiLlVx7baI4FdclKpPbKcG8vw+Hw/E77uIQumYMzFNHZA==",
                            PhoneNumber = "+79139990407",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73c3c524-8384-4145-b7ac-4ae1889e269f",
                            SoftDelete = true,
                            TwoFactorEnabled = false,
                            UserName = "kvlad1972@mail.ru",
                            ViewDelete = false
                        });
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.Agent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Agents", "data");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Акционерное общество Новосибирскэнергосбыт"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Акционерное общество Новосибирскэнергосбыт"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Акционерное общество Новосибирскэнергосбыт"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Акционерное общество Новосибирскэнергосбыт"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Акционерное общество Новосибирскэнергосбыт"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Акционерное общество Новосибирскэнергосбыт"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Акционерное общество Новосибирскэнергосбыт"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Акционерное общество Новосибирскэнергосбыт"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Акционерное общество Новосибирскэнергосбыт"
                        });
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Companies", "data");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "АО \"Главновосибирскстрой\", завод \"Сибит\""
                        },
                        new
                        {
                            Id = 2L,
                            Name = "АО \"Главновосибирскстрой\", ОП завод \"Сибит Южный\""
                        },
                        new
                        {
                            Id = 3L,
                            Name = "АО \"ЛПК\""
                        },
                        new
                        {
                            Id = 4L,
                            Name = "ООО \"Пригородный\""
                        },
                        new
                        {
                            Id = 5L,
                            Name = "ООО \"Машкомплект\""
                        },
                        new
                        {
                            Id = 6L,
                            Name = "ООО \"ЖБИ-5\""
                        },
                        new
                        {
                            Id = 7L,
                            Name = "ООО \"Брикстоун\""
                        },
                        new
                        {
                            Id = 8L,
                            Name = "АО \"Искитимизвесть\""
                        },
                        new
                        {
                            Id = 9L,
                            Name = "ООО \"Новый век\" (ЖБИ-5)"
                        });
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.CompanyUser", b =>
                {
                    b.Property<long?>("companyId")
                        .HasColumnType("bigint");

                    b.Property<string>("userId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("companyId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("CompanyUsers", (string)null);
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.InputControlIzvest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("Activity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReceipt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ExtinguishingTemperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ExtinguishingTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UniformityVolumeChange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UnquencheGrains")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WetBulkDensity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("userId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("InputControlIzvests", "datalab");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.InputControlSand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("ClaySubstances")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReceipt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("SizeModulus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalSandReceived")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterSand")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WetBulkDensity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("userId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("InputControlSands", "datalab");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.IzvestFromSilos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("Activity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateTimeTrial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTrial")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Enthalpiy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Time")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("TimeTrial")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("userId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("IzvestFromSiloss", "datalab");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<string>("DocType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<double>("ProductCount")
                        .HasColumnType("float");

                    b.Property<string>("ProductEdIzm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ProductNalog")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal?>("ProductStoim")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("ProductTarif")
                        .HasColumnType("float");

                    b.Property<decimal?>("SumNalog")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SumProductNalog")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("sheetfId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("sheetfId");

                    b.ToTable("Orders", "data");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Delete = false,
                            DocType = "D",
                            ProductCount = 252.0,
                            ProductEdIzm = "кВт",
                            ProductNalog = 20m,
                            ProductName = "Электрическая мощность-3-я ценовая категория (СН2) от 670кВт по 10МВт ставка за мощность",
                            ProductStoim = 225721.87092m,
                            ProductTarif = 895.72171000000003,
                            SumNalog = 45144.374184m,
                            SumProductNalog = 270866.245104m,
                            sheetfId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Delete = false,
                            DocType = "D",
                            ProductCount = 276593.0,
                            ProductEdIzm = "кВт.ч",
                            ProductNalog = 20m,
                            ProductName = "Электрическая энергия-3-я ценовая категория (СН2) от 670кВт по 10МВт ставка за энергию",
                            ProductStoim = 1059593.03998731m,
                            ProductTarif = 3.8308743893999999,
                            SumNalog = 211918.607997462m,
                            SumProductNalog = 1271511.647984772m,
                            sheetfId = 1L
                        });
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("EdIzm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Products", "data");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EdIzm = "кВт",
                            Name = "Электрическая мощность-3-я ценовая категория (СН2) от 670кВт по 10МВт ставка за мощность"
                        },
                        new
                        {
                            Id = 2L,
                            EdIzm = "кВт.ч",
                            Name = "Электрическая энергия-3-я ценовая категория (СН2) от 670кВт по 10МВт ставка за энергию"
                        });
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.ResultsLimeMill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("ActiveLime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Agent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLimeOnManufakt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTrial")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Entalpya")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LimeMn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LimeMnK")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SandMn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SandMnK")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SandProc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Sito200")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Sito80")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TimeTrial")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("userId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("ResultsLimeMills", "datalab");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.ResultsPortlandCement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Agent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BeginCementSet")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<decimal?>("CoeffWaterSepar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTrial")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndCementSet")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<decimal?>("NormDensityCementPaste")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Sito90")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SpecificSurface")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("userId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("ResultsPortlandCements", "datalab");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.SBDataLab", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateAt1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateAt2")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NGCementProc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("id_nameUser1")
                        .HasColumnType("int");

                    b.Property<int>("id_nameUser2")
                        .HasColumnType("int");

                    b.Property<decimal?>("plotnSlimeInSB")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("procentGipsInSB")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("timeEndForceCement")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("timeStartForceCement")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("toniCementProc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("toniSandSlime")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SBDataLabs", "data");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.SandSludgeMill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateTimeTrial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTrial")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Density")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DensityReturnSludge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumPool")
                        .HasColumnType("int");

                    b.Property<decimal?>("ResidueOnSieve")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TimeTrial")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("userId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("SandSludgeMills", "datalab");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.SandSludgePool", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateTimeTrial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTrial")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Density")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GypsumContentSandSlurry")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumPool")
                        .HasColumnType("int");

                    b.Property<decimal?>("ResidueOnSieve")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TimeTrial")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("userId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("SandSludgePools", "datalab");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.Sheetf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAct")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<string>("DocType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("NumAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pokupat")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Prodavec")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("ProductCount")
                        .HasColumnType("float");

                    b.Property<string>("ProductEdIzm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ProductNalog")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal?>("ProductStoim")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("ProductTarif")
                        .HasColumnType("float");

                    b.Property<decimal?>("SumNalog")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SumProductNalog")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("companyId")
                        .HasColumnType("bigint");

                    b.Property<string>("userId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("companyId");

                    b.ToTable("Sheetfs", "data");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Approved = false,
                            DateAct = new DateTime(2023, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Delete = false,
                            DocType = "D",
                            NumAct = "128550-23-И33986",
                            Pokupat = "ООО Новый век (ЖБИ-5)",
                            Prodavec = "Акционерное общество Новосибирскэнергосбыт",
                            ProductCount = 276593.0,
                            ProductEdIzm = "кВт.ч",
                            ProductNalog = 20m,
                            ProductName = "Электрическая энергия-3-я ценовая категория (СН2) от 670кВт по 10МВт ставка за энергию",
                            ProductTarif = 3.8308743893999999,
                            companyId = 1L,
                            userId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            Approved = false,
                            DateAct = new DateTime(2023, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Delete = false,
                            DocType = "D",
                            NumAct = "128550-23-И33987",
                            Pokupat = "ООО Новый век (ЖБИ-5)",
                            Prodavec = "Акционерное общество Новосибирскэнергосбыт",
                            ProductCount = 176593.0,
                            ProductEdIzm = "кВт.ч",
                            ProductNalog = 20m,
                            ProductName = "Электрическая энергия-3-я ценовая категория (СН2) от 670кВт по 10МВт ставка за энергию",
                            ProductTarif = 3.8308743893999999,
                            companyId = 1L,
                            userId = "1"
                        });
                });

            modelBuilder.Entity("WebAppAutorization.Data.Identity.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Identity.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("H_FactoryH_eemp", b =>
                {
                    b.HasOne("WebAppAutorization.Data.ISData.H_Factory", null)
                        .WithMany()
                        .HasForeignKey("H_Factorysid_factory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppAutorization.Data.ISData.H_eemp", null)
                        .WithMany()
                        .HasForeignKey("H_eempsid_eemp")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebAppAutorization.Data.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebAppAutorization.Data.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppAutorization.Data.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebAppAutorization.Data.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.I_Factory_Division", b =>
                {
                    b.HasOne("WebAppAutorization.Data.ISData.H_Division", "h_division")
                        .WithMany("I_Factory_Divisions")
                        .HasForeignKey("id_division")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppAutorization.Data.ISData.H_Factory", "h_factory")
                        .WithMany("I_Factory_Divisions")
                        .HasForeignKey("id_factory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("h_division");

                    b.Navigation("h_factory");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.I_Factory_eemp", b =>
                {
                    b.HasOne("WebAppAutorization.Data.ISData.H_eemp", "h_eemp")
                        .WithMany("I_Factory_eemps")
                        .HasForeignKey("h_eempid_eemp");

                    b.HasOne("WebAppAutorization.Data.ISData.H_Factory", "h_factory")
                        .WithMany("I_Factory_eemps")
                        .HasForeignKey("h_factoryid_factory");

                    b.Navigation("h_eemp");

                    b.Navigation("h_factory");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.I_division_object", b =>
                {
                    b.HasOne("WebAppAutorization.Data.ISData.H_Division", "h_division")
                        .WithMany("I_division_objects")
                        .HasForeignKey("id_division")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppAutorization.Data.ISData.H_object", "h_object")
                        .WithMany("I_division_objects")
                        .HasForeignKey("id_object")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("h_division");

                    b.Navigation("h_object");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.I_object_eemp", b =>
                {
                    b.HasOne("WebAppAutorization.Data.ISData.H_eemp", "h_eemp")
                        .WithMany("I_object_eemps")
                        .HasForeignKey("id_eemp")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppAutorization.Data.ISData.H_object", "h_object")
                        .WithMany("I_object_eemps")
                        .HasForeignKey("id_object")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("h_eemp");

                    b.Navigation("h_object");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.S_Division_info", b =>
                {
                    b.HasOne("WebAppAutorization.Data.ISData.H_Division", "h_division")
                        .WithMany("S_Division_infos")
                        .HasForeignKey("h_divisionid_division");

                    b.Navigation("h_division");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.S_Factory_info", b =>
                {
                    b.HasOne("WebAppAutorization.Data.ISData.H_Factory", "h_factory")
                        .WithMany("S_Factory_infos")
                        .HasForeignKey("h_factoryid_factory");

                    b.Navigation("h_factory");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.S_eemp_cc", b =>
                {
                    b.HasOne("WebAppAutorization.Data.ISData.H_eemp", "h_eemp")
                        .WithMany("S_eemp_ccs")
                        .HasForeignKey("h_eempid_eemp");

                    b.Navigation("h_eemp");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.S_eemp_info", b =>
                {
                    b.HasOne("WebAppAutorization.Data.ISData.H_eemp", "h_eemp")
                        .WithMany("S_eemp_infos")
                        .HasForeignKey("h_eempid_eemp");

                    b.Navigation("h_eemp");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.S_object_info", b =>
                {
                    b.HasOne("WebAppAutorization.Data.ISData.H_object", "h_object")
                        .WithMany("S_object_infos")
                        .HasForeignKey("h_objectid_object");

                    b.Navigation("h_object");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.CompanyUser", b =>
                {
                    b.HasOne("WebAppAutorization.Data.Tables.Company", "company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppAutorization.Data.Identity.User", "user")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("user");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.Order", b =>
                {
                    b.HasOne("WebAppAutorization.Data.Tables.Sheetf", "Sheetf")
                        .WithMany("Orders")
                        .HasForeignKey("sheetfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sheetf");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.Sheetf", b =>
                {
                    b.HasOne("WebAppAutorization.Data.Tables.Company", "Company")
                        .WithMany("Sheetfs")
                        .HasForeignKey("companyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.H_Division", b =>
                {
                    b.Navigation("I_Factory_Divisions");

                    b.Navigation("I_division_objects");

                    b.Navigation("S_Division_infos");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.H_Factory", b =>
                {
                    b.Navigation("I_Factory_Divisions");

                    b.Navigation("I_Factory_eemps");

                    b.Navigation("S_Factory_infos");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.H_eemp", b =>
                {
                    b.Navigation("I_Factory_eemps");

                    b.Navigation("I_object_eemps");

                    b.Navigation("S_eemp_ccs");

                    b.Navigation("S_eemp_infos");
                });

            modelBuilder.Entity("WebAppAutorization.Data.ISData.H_object", b =>
                {
                    b.Navigation("I_division_objects");

                    b.Navigation("I_object_eemps");

                    b.Navigation("S_object_infos");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Identity.User", b =>
                {
                    b.Navigation("CompanyUsers");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.Company", b =>
                {
                    b.Navigation("CompanyUsers");

                    b.Navigation("Sheetfs");
                });

            modelBuilder.Entity("WebAppAutorization.Data.Tables.Sheetf", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
